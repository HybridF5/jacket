[metadata]
name = jacket
summary = Cloud jacket fabric controller
description-file =
    README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = http://docs.openstack.org/developer/jacket/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7

[global]
setup-hooks =
    pbr.hooks.setup_hook

[files]
packages =
    jacket

[entry_points]
oslo.config.opts =
    jacket = jacket.opts:list_opts
    jacket.conf = jacket.conf.opts:list_opts
    jacket.worker = jacket.worker.opts:list_opts

    compute = jacket.compute.opts:list_opts
    compute.conf = jacket.compute.conf.opts:list_opts
    compute.api = jacket.api.compute.opts:list_opts
    compute.cells = jacket.compute.cells.opts:list_opts
    compute.cloud = jacket.compute.cloud.opts:list_opts
    compute.network = jacket.compute.network.opts:list_opts
    compute.network.neutronv2 = jacket.compute.network.neutronv2.api:list_opts
    compute.virt = jacket.compute.virt.opts:list_opts
    compute.cache_utils = jacket.compute.cache_utils:list_opts

    storage = jacket.storage.opts:list_opts
    keystonemiddleware = keystonemiddleware.auth_token:list_opts
    oslo_concurrency = oslo_concurrency.opts:list_opts
    oslo.messaging = oslo_messaging.opts:list_opts
    oslo.db.concurrency = oslo.db.concurrency:list_opts

oslo.config.opts.defaults =
    jacket = jacket.common.config:set_middleware_defaults

console_scripts =
    jacket-api = jacket.cmd.api:main
    jacket-worker = jacket.cmd.worker:main
    jacket-rootwrap = oslo_rootwrap.cmd:main
    jacket-manage = jacket.cmd.manage:main

database.migration =
    compute = jacket.db.compute.migration
    cloud_config = jacket.db.cloud_config.migration
    storage = jacket.db.storage.migration

jacket.database.migration_backend =
    sqlalchemy = oslo_db.sqlalchemy.migration

compute.ipv6_backend =
    rfc2462 = jacket.compute.ipv6.rfc2462
    account_identifier = jacket.compute.ipv6.account_identifier

jacket.compute.monitors.cpu =
    virt_driver = jacket.compute.monitors.cpu.virt_driver:Monitor

jacket.image.download.modules =
    file = jacket.image.download.file

jacket.api.v21.extensions =
    access_ips = jacket.api.compute.openstack.compute.access_ips:AccessIPs
    admin_actions = jacket.api.compute.openstack.compute.admin_actions:AdminActions
    admin_password = jacket.api.compute.openstack.compute.admin_password:AdminPassword
    agents = jacket.api.compute.openstack.compute.agents:Agents
    aggregates = jacket.api.compute.openstack.compute.aggregates:Aggregates
    assisted_volume_snapshots = jacket.api.compute.openstack.compute.assisted_volume_snapshots:AssistedVolumeSnapshots
    attach_interfaces = jacket.api.compute.openstack.compute.attach_interfaces:AttachInterfaces
    availability_zone = jacket.api.compute.openstack.compute.availability_zone:AvailabilityZone
    baremetal_nodes = jacket.api.compute.openstack.compute.baremetal_nodes:BareMetalNodes
    block_device_mapping = jacket.api.compute.openstack.compute.block_device_mapping:BlockDeviceMapping
    cells = jacket.api.compute.openstack.compute.cells:Cells
    certificates = jacket.api.compute.openstack.compute.certificates:Certificates
    cloudpipe = jacket.api.compute.openstack.compute.cloudpipe:Cloudpipe
    config_drive = jacket.api.compute.openstack.compute.config_drive:ConfigDrive
    console_auth_tokens = jacket.api.compute.openstack.compute.console_auth_tokens:ConsoleAuthTokens
    console_output = jacket.api.compute.openstack.compute.console_output:ConsoleOutput
    consoles = jacket.api.compute.openstack.compute.consoles:Consoles
    create_backup = jacket.api.compute.openstack.compute.create_backup:CreateBackup
    deferred_delete = jacket.api.compute.openstack.compute.deferred_delete:DeferredDelete
    disk_config = jacket.api.compute.openstack.compute.disk_config:DiskConfig
    evacuate = jacket.api.compute.openstack.compute.evacuate:Evacuate
    extended_availability_zone = jacket.api.compute.openstack.compute.extended_availability_zone:ExtendedAvailabilityZone
    extended_server_attributes = jacket.api.compute.openstack.compute.extended_server_attributes:ExtendedServerAttributes
    extended_status = jacket.api.compute.openstack.compute.extended_status:ExtendedStatus
    extended_volumes = jacket.api.compute.openstack.compute.extended_volumes:ExtendedVolumes
    extension_info = jacket.api.compute.openstack.compute.extension_info:ExtensionInfo
    fixed_ips = jacket.api.compute.openstack.compute.fixed_ips:FixedIps
    flavors = jacket.api.compute.openstack.compute.flavors:Flavors
    flavors_extraspecs = jacket.api.compute.openstack.compute.flavors_extraspecs:FlavorsExtraSpecs
    flavor_access = jacket.api.compute.openstack.compute.flavor_access:FlavorAccess
    flavor_rxtx = jacket.api.compute.openstack.compute.flavor_rxtx:FlavorRxtx
    flavor_manage = jacket.api.compute.openstack.compute.flavor_manage:FlavorManage
    floating_ip_dns = jacket.api.compute.openstack.compute.floating_ip_dns:FloatingIpDns
    floating_ip_pools = jacket.api.compute.openstack.compute.floating_ip_pools:FloatingIpPools
    floating_ips = jacket.api.compute.openstack.compute.floating_ips:FloatingIps
    floating_ips_bulk = jacket.api.compute.openstack.compute.floating_ips_bulk:FloatingIpsBulk
    fping = jacket.api.compute.openstack.compute.fping:Fping
    hide_server_addresses = jacket.api.compute.openstack.compute.hide_server_addresses:HideServerAddresses
    hosts = jacket.api.compute.openstack.compute.hosts:Hosts
    hypervisors = jacket.api.compute.openstack.compute.hypervisors:Hypervisors
    images = jacket.api.compute.openstack.compute.images:Images
    image_metadata = jacket.api.compute.openstack.compute.image_metadata:ImageMetadata
    image_size = jacket.api.compute.openstack.compute.image_size:ImageSize
    instance_actions = jacket.api.compute.openstack.compute.instance_actions:InstanceActions
    instance_usage_audit_log = jacket.api.compute.openstack.compute.instance_usage_audit_log:InstanceUsageAuditLog
    ips = jacket.api.compute.openstack.compute.ips:IPs
    keypairs = jacket.api.compute.openstack.compute.keypairs:Keypairs
    limits = jacket.api.compute.openstack.compute.limits:Limits
    lock_server = jacket.api.compute.openstack.compute.lock_server:LockServer
    migrate_server = jacket.api.compute.openstack.compute.migrate_server:MigrateServer
    migrations = jacket.api.compute.openstack.compute.migrations:Migrations
    multinic = jacket.api.compute.openstack.compute.multinic:Multinic
    multiple_create = jacket.api.compute.openstack.compute.multiple_create:MultipleCreate
    networks = jacket.api.compute.openstack.compute.networks:Networks
    networks_associate = jacket.api.compute.openstack.compute.networks_associate:NetworksAssociate
    pause_server = jacket.api.compute.openstack.compute.pause_server:PauseServer
# NOTE(cyeoh): this is intentionally disabled until microversions is active.
# See https://bugs.launchpad.net/nova/+bug/1426241
#    pci = jacket.api.compute.openstack.compute.pci:Pci
    personality = jacket.api.compute.openstack.compute.personality:Personality
    preserve_ephemeral_rebuild = jacket.api.compute.openstack.compute.preserve_ephemeral_rebuild:PreserveEphemeralRebuild
    quota_classes = jacket.api.compute.openstack.compute.quota_classes:QuotaClasses
    quota_sets = jacket.api.compute.openstack.compute.quota_sets:QuotaSets
    remote_consoles = jacket.api.compute.openstack.compute.remote_consoles:RemoteConsoles
    rescue = jacket.api.compute.openstack.compute.rescue:Rescue
    scheduler_hints = jacket.api.compute.openstack.compute.scheduler_hints:SchedulerHints
    security_group_default_rules = jacket.api.compute.openstack.compute.security_group_default_rules:SecurityGroupDefaultRules
    security_groups = jacket.api.compute.openstack.compute.security_groups:SecurityGroups
    server_diagnostics = jacket.api.compute.openstack.compute.server_diagnostics:ServerDiagnostics
    server_external_events = jacket.api.compute.openstack.compute.server_external_events:ServerExternalEvents
    server_metadata = jacket.api.compute.openstack.compute.server_metadata:ServerMetadata
    server_migrations = jacket.api.compute.openstack.compute.server_migrations:ServerMigrations
    server_password = jacket.api.compute.openstack.compute.server_password:ServerPassword
    server_usage = jacket.api.compute.openstack.compute.server_usage:ServerUsage
    server_groups = jacket.api.compute.openstack.compute.server_groups:ServerGroups
    servers = jacket.api.compute.openstack.compute.servers:Servers
    services = jacket.api.compute.openstack.compute.services:Services
    shelve = jacket.api.compute.openstack.compute.shelve:Shelve
    simple_tenant_usage = jacket.api.compute.openstack.compute.simple_tenant_usage:SimpleTenantUsage
    suspend_server = jacket.api.compute.openstack.compute.suspend_server:SuspendServer
    tenant_networks = jacket.api.compute.openstack.compute.tenant_networks:TenantNetworks
    used_limits = jacket.api.compute.openstack.compute.used_limits:UsedLimits
    user_data = jacket.api.compute.openstack.compute.user_data:UserData
    versions = jacket.api.compute.openstack.compute.versionsV21:Versions
    virtual_interfaces = jacket.api.compute.openstack.compute.virtual_interfaces:VirtualInterfaces
    volumes = jacket.api.compute.openstack.compute.volumes:Volumes

cloud.api.v21.extensions.server.create =
    access_ips = jacket.api.compute.openstack.compute.access_ips:AccessIPs
    availability_zone = jacket.api.compute.openstack.compute.availability_zone:AvailabilityZone
    block_device_mapping = jacket.api.compute.openstack.compute.block_device_mapping:BlockDeviceMapping
    block_device_mapping_v1 = jacket.api.compute.openstack.compute.block_device_mapping_v1:BlockDeviceMappingV1
    config_drive = jacket.api.compute.openstack.compute.config_drive:ConfigDrive
    disk_config = jacket.api.compute.openstack.compute.disk_config:DiskConfig
    keypairs_create = jacket.api.compute.openstack.compute.keypairs:Keypairs
    multiple_create = jacket.api.compute.openstack.compute.multiple_create:MultipleCreate
    personality = jacket.api.compute.openstack.compute.personality:Personality
    scheduler_hints = jacket.api.compute.openstack.compute.scheduler_hints:SchedulerHints
    security_groups = jacket.api.compute.openstack.compute.security_groups:SecurityGroups
    user_data = jacket.api.compute.openstack.compute.user_data:UserData

cloud.api.v21.extensions.server.rebuild =
    access_ips = jacket.api.compute.openstack.compute.access_ips:AccessIPs
    disk_config = jacket.api.compute.openstack.compute.disk_config:DiskConfig
    personality = jacket.api.compute.openstack.compute.personality:Personality
    preserve_ephemeral_rebuild = jacket.api.compute.openstack.compute.preserve_ephemeral_rebuild:PreserveEphemeralRebuild

cloud.api.v21.extensions.server.update =
    access_ips = jacket.api.compute.openstack.compute.access_ips:AccessIPs
    disk_config = jacket.api.compute.openstack.compute.disk_config:DiskConfig

cloud.api.v21.extensions.server.resize =
   disk_config = jacket.api.compute.openstack.compute.disk_config:DiskConfig

cloud.api.v21.test_extensions =
    basic = jacket.tests.unit.api.openstack.compute.basic:Basic
    microversions = jacket.tests.unit.api.openstack.compute.microversions:Microversions

compute.scheduler.host_manager =
    host_manager = jacket.compute.scheduler.host_manager:HostManager
    ironic_host_manager = jacket.compute.scheduler.ironic_host_manager:IronicHostManager

compute.scheduler.driver =
    filter_scheduler = jacket.compute.scheduler.filter_scheduler:FilterScheduler
    caching_scheduler = jacket.compute.scheduler.caching_scheduler:CachingScheduler
    chance_scheduler = jacket.compute.scheduler.chance:ChanceScheduler
    fake_scheduler = jacket.compute.tests.unit.scheduler.fakes:FakeScheduler

[build_sphinx]
all_files = 1
build-dir = doc/build
source-dir = doc/source

[build_apiguide]
all_files = 1
build-dir = api-guide/build
source-dir = api-guide/source

[egg_info]
tag_build =
tag_date = 0
tag_svn_revision = 0

[compile_catalog]
directory = jacket/locale
domain = jacket jacket-log-critical jacket-log-error jacket-log-info jacket-log-warning

[update_catalog]
domain = jacket
output_dir = jacket/locale
input_file = jacket/locale/jacket.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = jacket/locale/jacket.pot

[wheel]
universal = 1

[pbr]
# Treat sphinx warnings as errors during the docs build; this helps us keep
# the documentation clean.
warnerrors = true
